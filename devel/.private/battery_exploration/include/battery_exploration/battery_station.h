// Generated by gencpp from file battery_exploration/battery_station.msg
// DO NOT EDIT!


#ifndef BATTERY_EXPLORATION_MESSAGE_BATTERY_STATION_H
#define BATTERY_EXPLORATION_MESSAGE_BATTERY_STATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace battery_exploration
{
template <class ContainerAllocator>
struct battery_station_
{
  typedef battery_station_<ContainerAllocator> Type;

  battery_station_()
    : x(0.0)
    , y(0.0)
    , distance(0.0)
    , battery(0.0)  {
    }
  battery_station_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , distance(0.0)
    , battery(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _battery_type;
  _battery_type battery;





  typedef boost::shared_ptr< ::battery_exploration::battery_station_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::battery_exploration::battery_station_<ContainerAllocator> const> ConstPtr;

}; // struct battery_station_

typedef ::battery_exploration::battery_station_<std::allocator<void> > battery_station;

typedef boost::shared_ptr< ::battery_exploration::battery_station > battery_stationPtr;
typedef boost::shared_ptr< ::battery_exploration::battery_station const> battery_stationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::battery_exploration::battery_station_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::battery_exploration::battery_station_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::battery_exploration::battery_station_<ContainerAllocator1> & lhs, const ::battery_exploration::battery_station_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.distance == rhs.distance &&
    lhs.battery == rhs.battery;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::battery_exploration::battery_station_<ContainerAllocator1> & lhs, const ::battery_exploration::battery_station_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace battery_exploration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::battery_exploration::battery_station_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::battery_exploration::battery_station_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::battery_exploration::battery_station_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::battery_exploration::battery_station_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::battery_exploration::battery_station_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::battery_exploration::battery_station_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::battery_exploration::battery_station_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb1e3cafe78d7101d500adbbdedc5d81";
  }

  static const char* value(const ::battery_exploration::battery_station_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb1e3cafe78d7101ULL;
  static const uint64_t static_value2 = 0xd500adbbdedc5d81ULL;
};

template<class ContainerAllocator>
struct DataType< ::battery_exploration::battery_station_<ContainerAllocator> >
{
  static const char* value()
  {
    return "battery_exploration/battery_station";
  }

  static const char* value(const ::battery_exploration::battery_station_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::battery_exploration::battery_station_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 distance\n"
"float32 battery\n"
;
  }

  static const char* value(const ::battery_exploration::battery_station_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::battery_exploration::battery_station_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.distance);
      stream.next(m.battery);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct battery_station_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::battery_exploration::battery_station_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::battery_exploration::battery_station_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "battery: ";
    Printer<float>::stream(s, indent + "  ", v.battery);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BATTERY_EXPLORATION_MESSAGE_BATTERY_STATION_H
